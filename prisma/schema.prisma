// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  email           String     @unique
  hash            String
  admin           Boolean    @default(false)
  fullName        String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  bio             String?
  pic             String?
  sortCode        String?
  accountNo       String?
  bankName String?
  accountName String?
  enrolledCourses Course[]   @relation("enrolledCourses", fields: [courseIds], references: [id])
  courseIds       String[]   @db.ObjectId
  createdCourses  Course[]
  orders          Order[]
  role            Role       @default(STUDENT)
  Wishlist        Wishlist[]
}

enum Role {
  STUDENT
  ADMIN
  TUTOR
}

model Wishlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseId String @db.ObjectId
  course   Course @relation(fields: [courseId], references: [id])

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
}

model Order {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  user            User?    @relation(fields: [userId], references: [id])
  userId          String   @db.ObjectId
  stripeSessionId String
  status          String   @default("success")
  total           Float
  items           Course[] @relation(fields: [itemsIds], references: [id])
  itemsIds        String[] @db.ObjectId
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
}

model Course {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  featuredImage String
  price         Float
  author        User       @relation(fields: [authorId], references: [id])
  authorId      String     @db.ObjectId
  orders        Order[]    @relation(fields: [orderIds], references: [id])
  orderIds      String[]   @db.ObjectId
  categories    Category[] @relation(fields: [categoryIds], references: [id])
  categoryIds   String[]   @db.ObjectId
  lessons       Lesson[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  students      User[]     @relation("enrolledCourses", fields: [studentIds], references: [id])
  studentIds    String[]   @db.ObjectId
  wishlist      Wishlist[]
}

model Lesson {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  video_url String
  duration  String
  materials String[]
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  courses   Course[] @relation(fields: [courseIds], references: [id])
  courseIds String[] @db.ObjectId
}
